<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="16374" MadCap:lastWidth="993" MadCap:ignoredWords="returs;y" MadCap:disableMasterStylesheet="true" MadCap:tocPath="The Query Monitor Tab" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head>
        <link href="SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Iterator Attributes</title>
        <link href="resources/tablestyles/inner.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="resources/stylesheets/emc_help_stylesheet.css" rel="stylesheet" type="text/css" />
        <script src="SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <h1 class="EMCHeadingLanding"><a name="top"></a>Iterator Attributes</h1>
        <P>The tables below list additional metrics for all of the possible iterators in a query. These metrics display in the circled area of the Query Plan details shown below. The values in the [estimated] field(s) are the anticipated values that the query planner expected the iterator to generate during query execution. </P>
        <P>
            <img src="resources/images/querydetailsall_993x528.png" style="width: 993; height: 528;" />
        </P>
        <P class="EMCHeading2">Metric Terminology</P>
        <p>The following information explains some of the database terms and concepts that appear in iterator metrics in Command Center:</p>
        <p><b>Node</b>: Refers to a step in a query plan. A query plan has sets of operations that Greenplum Database performs to produce the answer to a given query. A <i>node</i> in the plan represents a specific database operation, such as a table scan, join, aggregation, sort, etc.</p>
        <p><b>Iterator</b>:&#160;Represents the actual execution of the node in a query plan. <i>Node</i> and <i>iterator</i> are sometimes used interchangeably.</p>
        <p><b>Tuple</b>: Refers to a row returned as part of a result set from a query, as well as a record in a table. </p>
        <p><b>Spill</b>: When there is not enough memory to perform a database operation, data must be written (or spilled) to disk. </p>
        <p><b>Passes</b>: Occur when an iterator must scan (or pass) over spilled data to obtain a result. A pass represents one pass through all input tuples, or all data in batch files generated after spill, which happens hierarchically. In the first pass, all input tuples are read, and intermediate results are spilled to a specified number of batch files. In the second pass, the data in all batch files is processed. If the results are still too large to store in memory, the intermediate results are spilled to the second level of spill files, and the process repeats again.</p>
        <p><b>Batches</b>: Refers to the actual files created when data is spilled to disk. This is most often associated to Hash operations.</p>
        <p><b>Join</b>: This clause in a query joins two or more tables. There are three types of Join algorithms in Greenplum Database:</p>
        <ul>
            <li class="EMCBullet1" value="1">Hash Join</li>
            <li class="EMCBullet1" value="2">Merge Join</li>
            <li class="EMCBullet1" value="3">Nested Loop</li>
        </ul>
        <p>Each of these operations include their own respective Join semantics. The Performance Monitor Console displays iterator metrics for each of these semantics.</p>
        <p class="EMCHeading1">Append</p>
        <p>An Append iterator has two or more input sets. Append returns all rows from the first input set, then all rows from the second input set, and so on, until all rows from all input sets are processed. Append is also used when you select from a table involved in an inheritance hierarchy.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 258px;" />
            <col style="width: 127px;" />
            <col style="width: 302px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Append Current Input Source</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Inputs </td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of the current table being scanned.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Append-only Scan</p>
        <p>This iterator scans append-only type-tables.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 256px;" />
            <col style="width: 117px;" />
            <col style="width: 314px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep"> Append-only Scan Rescan </td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans </td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of append-only rescans by this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Append-only Columnar Scan</p>
        <p>This iterator scans append-only columnar-type tables.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 254px;" />
            <col style="width: 133px;" />
            <col style="width: 300px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Append-Only Columnar Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of append-only columnar rescans by this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Aggregate</p>
        <p>The query planner produces an aggregate iterator whenever the query includes an aggregate function. For example, the following functions are aggregate functions: <code>AVG(), COUNT(), MAX(), MIN(), STDDEV(), SUM(), </code>and<code> VARIANCE()</code>. Aggregate reads all the rows in the input set and computes the aggregate values. If the input set is not grouped, Aggregate produces a single result row.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 254px;" />
            <col style="width: 133px;" />
            <col style="width: 301px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples spilled to disk</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The  number of bytes spilled to disk.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of spill batches required.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Pass</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Passes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of passes across all of the batches.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Read Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes read in for this spill batch.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Read Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples read in for this spill batch.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples that are in each spill file in the current pass.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes that are in each spill file in the current pass.
</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Aggregate Current Spill Pass Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of batches created in the current pass.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">BitmapAnd</p>
        <p>This iterator takes the bitmaps generated from multiple BitmapIndexScan iterators, puts them together with an <code>AND </code>clause, and generates a new bitmap as its output.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 252px;" />
            <col style="width: 134px;" />
            <col style="width: 300px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">BitmapOr</p>
        <p>This iterator takes the bitmaps generated from multiple BitmapIndexScan iterators, puts them together with an <code>OR </code>clause, and generates a new bitmap as its output.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 250px;" />
            <col style="width: 135px;" />
            <col style="width: 303px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Bitmap Append-Only Scan</p>
        <p>This iterator retrieves all rows from the bitmap generated by BitmapAnd, BitmapOr, or BitmapIndexScan and accesses the append-only table to retrieve the relevant rows.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 251px;" />
            <col style="width: 132px;" />
            <col style="width: 302px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bitmap Append-Only Scan Pages</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Pages</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bitmap heap pages scanned.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Bitmap Append-Only Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans </td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of bitmap heap page rescans by this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Bitmap Heap Scan</p>
        <p>This iterator retrieves all rows from the bitmap generated by BitmapAnd, BitmapOr, or BitmapIndexScan and accesses the heap table to retrieve the relevant rows.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 251px;" />
            <col style="width: 131px;" />
            <col style="width: 303px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bitmap Heap Scan Pages</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Pages</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bitmap heap pages scanned.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Bitmap Heap Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number bitmap heap page rescans by this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Bitmap Index Scan</p>
        <p>This iterator produces a bitmap that corresponds to the rules that satisfy the query plan. </p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 250px;" />
            <col style="width: 131px;" />
            <col style="width: 303px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Bitmap Index Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans </td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number bitmap index rescans by this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Broadcast Motion</p>
        <p>This iterator sends an outbound tuple to all of its destinations.</p>
        <p>Note that the <i>Motion</i> metrics for the iterator are useful when investigating potential networking issues in the Greenplum Database system. Typically, the "Ack Time" values should be very small (microseconds or milliseconds). However if the "Ack Time" values are one or more seconds (particularly the "Motion Min Ack Time" metric), then a network performance issue likely exists. </p>
        <p>Also, if there are a large number of packets being dropped because of queue overflow, you can increase the value for the <span class="code">gp_interconnect_queue_depth</span> system configuration parameter to improve performance. See the <i>Greenplum Database Administrator Guide</i> for more in formation about system configuration parameters.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 233px;" />
            <col style="width: 125px;" />
            <col style="width: 324px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Bytes Sent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes sent by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Total Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The total amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Average Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The average amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Max Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The maximum amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Min Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The minimum amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Count Resent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The total number of packets that the iterator did not acknowledge when they first arrived in the queue.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Max Resent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The maximum number of packets that the iterator did not acknowledge when they first arrived in the queue. This metric is applied on a per packet basis. For example, a value of "10" indicates that a particular packet did not get acknowledged by this iterator 10 times, and that this was the maximum for this iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Bytes Received</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Motion Count Dropped</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of packets dropped by the iterator because of buffer overruns. </td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Explicit Redistribute Motion</p>
        <p>The Explicit Redistribute iterator moves tuples to segments explicitly specified in the segment ID column of the tuples. This is differs from a Redistribute Motion iterator, where target segments are indirectly specified through hash expressions. The Explicit Redistribute iterator is used when the query portion of a DML&#160;planned statement requires moving tuples across distributed tables.</p>
        <p>Note that the <i>Motion</i> metrics for the iterator are useful when investigating potential networking issues in the Greenplum Database system. Typically, the "Ack Time" values should be very small (microseconds or milliseconds). However if the "Ack Time" values are one or more seconds (particularly the "Motion Min Ack Time" metric), then a network performance issue likely exists. </p>
        <p>Also, if there are a large number of packets being dropped because of queue overflow, you can increase the value for the <span class="code">gp_interconnect_queue_depth</span> system configuration parameter to improve performance. See the <i>Greenplum Database Administrator Guide</i> for more in formation about system configuration parameters.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 233px;" />
            <col style="width: 125px;" />
            <col style="width: 324px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Bytes Sent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes sent by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Total Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The total amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Average Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The average amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Max Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The maximum amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Min Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The minimum amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Count Resent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The total number of packets that the iterator did not acknowledge when they first arrived in the queue.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Max Resent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The maximum number of packets that the iterator did not acknowledge when they first arrived in the queue. This metric is applied on a per packet basis. For example, a value of "10" indicates that a particular packet did not get acknowledged by this iterator 10 times, and that this was the maximum for this iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Bytes Received</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Motion Count Dropped</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of packets dropped by the iterator because of buffer overruns. </td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">External Scan</p>
        <p>This iterator scans an external table.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 249px;" />
            <col style="width: 131px;" />
            <col style="width: 299px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">External Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans </td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of external table rescans by this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Function Scan</p>
        <p>This iterator returns tuples produces by a function. </p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 248px;" />
            <col style="width: 131px;" />
            <col style="width: 300px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Gather Motion</p>
        <p>This iterator gathers streams of tuples that are sent by "sending" motions. If a merge key is specified, it merges many streams into a single order-preserved stream.</p>
        <p>Note that the <i>Motion</i> metrics for the iterator are useful when investigating potential networking issues in the Greenplum Database system. Typically, the "Ack Time" values should be very small (microseconds or milliseconds). However if the "Ack Time" values are one or more seconds (particularly the "Motion Min Ack Time" metric), then a network performance issue likely exists. </p>
        <p>Also, if there are a large number of packets being dropped because of queue overflow, you can increase the value for the <span class="code">gp_interconnect_queue_depth</span> system configuration parameter to improve performance. See the <i>Greenplum Database Administrator Guide</i> for more in formation about system configuration parameters.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 233px;" />
            <col style="width: 125px;" />
            <col style="width: 324px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Bytes Sent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes sent by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Total Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The total amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Average Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The average amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Max Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The maximum amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Min Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The minimum amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Count Resent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The total number of packets that the iterator did not acknowledge when they first arrived in the queue.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Max Resent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The maximum number of packets that the iterator did not acknowledge when they first arrived in the queue. This metric is applied on a per packet basis. For example, a value of "10" indicates that a particular packet did not get acknowledged by this iterator 10 times, and that this was the maximum for this iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Bytes Received</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Motion Count Dropped</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of packets dropped by the iterator because of buffer overruns. </td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">GroupAggregate</p>
        <p>The GroupAggregate iterator is a way to compute vector aggregates, and it is used to satisfy a <code>GROUP&#160;BY</code> clause. A single input set is required by the GroupAggregate iterator, and it must be ordered by the grouping column(s). This iterator returns a single row for a unique value of grouping columns. </p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 248px;" />
            <col style="width: 128px;" />
            <col style="width: 305px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The  number of tuples spilled to disk</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes spilled to disk.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of spill batches required.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Pass</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Passes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of passes across all of the batches</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Read Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes read in for this spill batch</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Read Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The  number of tuples read in for this spill batch</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples that are in each spill file in the current pass.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes that are in each spill file in the current pass.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Aggregate Current Spill Pass Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of batches created in the current pass.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">HashAggregate</p>
        <p>The HashAggregate iterator is similar to the GroupAggregate iterator. A single input set is required by the HashAggregate iterator and it creates a hash table from the input. However, it does not require its input to ordered. </p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 250px;" />
            <col style="width: 119px;" />
            <col style="width: 308px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples spilled to disk</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes spilled to disk.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of spill batches required.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Total Spill Pass</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Passes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of passes across all of the batches.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Read Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes read in for this spill batch.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Read Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples read in for this spill batch.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples that are in each spill file in the current pass.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Aggregate Current Spill Pass Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes that are in each spill file in the current pass.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Aggregate Current Spill Pass Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of batches created in the current pass.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Hash Join </p>
        <p>The Hash Join iterator requires two input sets - the outer and inner tables. </p>
        <p> The Hash Join iterator starts by creating its inner table using the Hash operator. The Hash operator creates a temporary Hash index that covers the join column in the inner table. When the hash table (that is, the inner table) is created, Hash Join reads each row in the outer table, hashes the join column (from the outer table), and searches the temporary Hash index for a matching value.</p>
        <p>In Greenplum Database, a Hash Join algorithm can be used with the following join semantics:</p>
        <ul>
            <li class="EMCBullet1" value="1">Left Join</li>
            <li class="EMCBullet1" value="2">Left Anti Semi Join</li>
            <li class="EMCBullet1" value="3">Full Join</li>
            <li class="EMCBullet1" value="4">Right Join</li>
            <li class="EMCBullet1" value="5">EXISTS Join</li>
            <li class="EMCBullet1" value="6">Reverse In Join</li>
            <li class="EMCBullet1" value="7">Unique Inner Join</li>
            <li class="EMCBullet1" value="8"> Unique Outer Join<br /><br /></li>
        </ul>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 247px;" />
            <col style="width: 129px;" />
            <col style="width: 300px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Hash Spill Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Batches</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The current batch being spilled.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Hash Spill Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The current number of spilled tuples.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Hash Spill Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The current number of bytes spilled to disk.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Index Scan</p>
        <p>An Index Scan operator traverses an index structure. If you specify a starting value for an indexed column, the Index Scan will begin at the appropriate value. If you specify an ending value, the Index Scan will complete as soon as it finds an index entry greater than the ending value. A query planner uses an Index Scan operator when it can reduce the size of the result set by traversing a range of indexed values, or when it can avoid a sort because of the implicit ordering offered by an index.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 249px;" />
            <col style="width: 119px;" />
            <col style="width: 309px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Index Scan Restore Pos</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Restores</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of restores.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep"> Index Scan Rescan </td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of rescans.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Limit</p>
        <p>The Limit operator is used to limit the size of a result set. Greenplum Database uses the Limit operator for both Limit and Offset processing. The Limit operator works by discarding the first x rows from its input set, returning the next y rows, and discarding the remainder. If the query includes an <code>OFFSET </code>clause, x represents the offset amount; otherwise, x is zero. If the query includes a <code>LIMIT </code>clause, y represents the Limit amount; otherwise, y is at least as large as the number of rows in the input set.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 247px;" />
            <col style="width: 121px;" />
            <col style="width: 306px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Materialize</p>
        <p> The materialize iterator is used for some sub-select operations. The query planner can decide that it is less expensive to materialize a sub-select one time than it is to repeat the work for each top-level row. Materialize is also used for some merge/join operations. </p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 246px;" />
            <col style="width: 121px;" />
            <col style="width: 307px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Materialize Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of times the executor requested to rescan the date for this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Merge Join</p>
        <p>The Merge Join iterator joins two tables. Like the Nested Loop iterator, Merge Join requires two input sets: An outer table and an inner table. Each input set must be ordered by the join columns.  In Greenplum Database, the Merge Join algorithm can be used with the following join semantics:</p>
        <ul>
            <li class="EMCBullet1" value="1">Left Join</li>
            <li class="EMCBullet1" value="2">Left Anti Semi Join</li>
            <li class="EMCBullet1" value="3">Full Join</li>
            <li class="EMCBullet1" value="4">Right Join</li>
            <li class="EMCBullet1" value="5">EXISTS Join</li>
            <li class="EMCBullet1" value="6">Reverse In Join</li>
            <li class="EMCBullet1" value="7">Unique Outer joins</li>
            <li class="EMCBullet1" value="8">Unique Inner Join<br /><br /></li>
        </ul>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 245px;" />
            <col style="width: 122px;" />
            <col style="width: 307px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Merge Join Inner Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of rows from the inner part of the query plan.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Merge Join Outer Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of rows from the Outer part of the query plan.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Nested Loop</p>
        <p>The Nested Loop iterator is used to perform a join between two tables, and as a result requires two input sets. It fetches each table from one of the input sets (called the outer table). For each row in the outer table, the other input (called the inner table) is searched for a row that meets the join qualifier. In Greenplum Database, a Merge Join algorithm can be used with the following join semantics:</p>
        <ul>
            <li class="EMCBullet1" value="1">Left Join</li>
            <li class="EMCBullet1" value="2">Left Anti Semi Join</li>
            <li class="EMCBullet1" value="3">Full Join</li>
            <li class="EMCBullet1" value="4">Right Join</li>
            <li class="EMCBullet1" value="5">EXISTS Join</li>
            <li class="EMCBullet1" value="6">Reverse In Join</li>
            <li class="EMCBullet1" value="7">Unique Outer Join</li>
            <li class="EMCBullet1" value="8">Unique Inner Join<br /><br /></li>
        </ul>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 229px;" />
            <col style="width: 124px;" />
            <col style="width: 316px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Nested Loop Inner Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of rows from the inner part of the query plan.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Nested Loop Outer Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of rows from the outer part of the query plan.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Redistribute Motion</p>
        <p>This iterator sends an outbound tuple to only one destination based on the value of a hash.</p>
        <p>Note that the <i>Motion</i> metrics for the iterator are useful when investigating potential networking issues in the Greenplum Database system. Typically, the "Ack Time" values should be very small (microseconds or milliseconds). However if the "Ack Time" values are one or more seconds (particularly the "Motion Min Ack Time" metric), then a network performance issue likely exists. </p>
        <p>Also, if there are a large number of packets being dropped because of queue overflow, you can increase the value for the <span class="code">gp_interconnect_queue_depth</span> system configuration parameter to improve performance. See the <i>Greenplum Database Administrator Guide</i> for more in formation about system configuration parameters.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 233px;" />
            <col style="width: 125px;" />
            <col style="width: 324px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Bytes Sent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes sent by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Total Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The total amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Average Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The average amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Max Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The maximum amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Min Ack Time</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Microseconds</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The minimum amount of time that the iterator waited for an acknowledgement after sending a packet of data.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Count Resent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The total number of packets that the iterator did not acknowledge when they first arrived in the queue.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Max Resent</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The maximum number of packets that the iterator did not acknowledge when they first arrived in the queue. This metric is applied on a per packet basis. For example, a value of "10" indicates that a particular packet did not get acknowledged by this iterator 10 times, and that this was the maximum for this iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Motion Bytes Received</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Motion Count Dropped</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Packets</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of packets dropped by the iterator because of buffer overruns. </td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Result</p>
        <p>The Result iterator is used to either (1) execute a query that does not retrieve data from a table, or evaluate the parts of a <code>WHERE </code>clause that do not depend on data retrieved from a table. It can also be used if the top node in the query plan is an Append iterator.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 220px;" />
            <col style="width: 125px;" />
            <col style="width: 324px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Repeat</p>
        <p>This iterator repeats every input operator a certain number of times. This is typically used for certain grouping operations. </p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 219px;" />
            <col style="width: 124px;" />
            <col style="width: 325px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Seq Scan</p>
        <p>The Seq Scan iterator scans  heap tables, and is the most basic query iterator. Any single-table query can be done by using the Seq Scan iterator. Seq Scan starts at the beginning of a heap table and scans to the end of the heap table. For each row in the heap table, Seq Scan evaluates the query constraints (the <code>WHERE </code>clause). If the constraints are satisfied, the required columns are added to the result set.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 217px;" />
            <col style="width: 127px;" />
            <col style="width: 326px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep"> Seq Scan Page Stats</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Pages</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of pages scanned.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Seq Scan Restore Pos</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Restores</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of times the executor restored the scan position.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Seq Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of times the executor requested to rescan the date for this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">SetOp</p>
        <p>There are four Setop iterators: </p>
        <ul>
            <li class="EMCBullet1" value="1">Intersect</li>
            <li class="EMCBullet1" value="2"> Intersect All</li>
            <li class="EMCBullet1" value="3">Except</li>
            <li class="EMCBullet1" value="4">Except All</li>
        </ul>
        <p> These iterators are produced only when the query planner encounters an INTERSECT, INTERSECT ALL, EXCEPT, or EXCEPT ALL clause, respectively. </p>
        <p>All SetOp iterators require two input sets. They combine the input sets into a sorted list, and then groups of identical rows are identified. For each group, the SetOp iterators counts the number of rows contributed by each input set, then uses the counts to determine the number of rows to add to the result set.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 215px;" />
            <col style="width: 127px;" />
            <col style="width: 325px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Shared Scan</p>
        <p>This iterator evaluates the common parts of a query plan. It shares the output of the common sub-plans with all other iterators, so that the sub-plan only needs to execute one time.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 209px;" />
            <col style="width: 145px;" />
            <col style="width: 311px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Seq Scan Page Stats</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Seq Scan Page Stats</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of pages scanned.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Seq Scan Restore Pos</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Seq Scan Restore Pos</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of times the executor restored the scan position.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Seq Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Seq Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of times the executor requested to rescan the date for this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Sort</p>
        <p>The Sort iterator imposes an ordering on the result set. Greenplum Database uses two different sort strategies: An in-memory sort and an on-disk sort. If the size of the result set exceeds the available memory, the Sort iterator distributes the input set to a collection of sorted work files and then merges the work files back together again. If the result set is less than  the available memory, the sort is done in memory.</p>
        <p>The Sort iterator is used for many purposes. A Sort can be used to satisfy an <code>ORDER BY</code> clause. Also, some query operators require their input sets to be ordered. </p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 207px;" />
            <col style="width: 148px;" />
            <col style="width: 310px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Sort Memory Usage</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of bytes used by the sort.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Sort Spill Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The current number of spilled tuples.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Sort Spill Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The current number of spilled bytes.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Sort Spill Pass</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Passes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of merge passes. Each merge pass merges several sorted runs into larger runs.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Sort Current Spill Pass Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Tuples</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples spilled in the current spill pass.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Sort Current Spill Pass Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Bytes</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of bytes spilled in the current spill pass.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Subquery Scan</p>
        <p>A Subquery Scan iterator is a pass-through iterator. It scans through its input set, adding each row to the result set. This iterator is used for internal purposes and has no affect on the overall query plan.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 205px;" />
            <col style="width: 149px;" />
            <col style="width: 308px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowSep_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Subquery Scan Rescan</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rescans</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of times the executor requested to rescan the date for this iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Tid Scan</p>
        <p>The Tid Scan (tuple ID scan) iterator  is used whenever the query planner encounters a constraint of the form <code>ctid = expression</code> or <code>expression = ctid</code>. This specifies a tuple ID, an identifier that is unique within a table. The tuple ID works like a bookmark, but is valid only within a single transaction. After the transaction completes, the tuple ID is not used again.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 205px;" />
            <col style="width: 147px;" />
            <col style="width: 309px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Unique</p>
        <p>The Unique iterator eliminates duplicate values from the input set. The input set must be ordered by the columns, and the columns must be unique. The Unique operator removes only rows — it does not remove columns and it does not change the ordering of the result set. Unique can return the first row in the result set before it has finished processing the input set. The query planner uses the Unique operator to satisfy a <code>DISTINCT </code>clause. Unique is also used to eliminate duplicates in a <code>UNION</code>.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 203px;" />
            <col style="width: 147px;" />
            <col style="width: 310px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Values Scan</p>
        <p>The Value Scan iterator is used to iterate over a set of constant tuples. </p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 201px;" />
            <col style="width: 149px;" />
            <col style="width: 307px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <p class="EMCHeading1">Window</p>
        <p>The Window <i>function</i> performs calculations across sets of rows that are related to the current query row. The Window iterator computes Window functions on the input set of rows.</p>
        <table style="mc-table-style: url('Resources/TableStyles/Inner.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle_Inner" cellspacing="1">
            <col style="width: 201px;" />
            <col style="width: 148px;" />
            <col style="width: 311px;" />
            <thead>
                <tr>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Metric</th>
                    <th class="TableStyle_Inner_Head_0_0_ColSep">Unit</th>
                    <th class="TableStyle_Inner_Head_0_0_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows in</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColSep">Rows</td>
                    <td class="TableStyle_Inner_Body_0_0_RowEnd_ColEnd">The number of tuples received by the iterator.</td>
                </tr>
            </tbody>
        </table>
        <script type="text/javascript" src="SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>